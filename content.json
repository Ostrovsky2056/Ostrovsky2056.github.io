{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2017/04/01/hello-world/"},{"title":"八大排序-选择排序","text":"简介选择排序：wikipedia选择排序 1、基本概念选择排序（Selection sort）是一种简单直观的排序算法。在每一次循环内都由一个数去跟所有的数都比较一次，每次比较都选取相对较小的那个数来进行下一次的比较，并不断更新较小数的下标。这样在一次循环结束时就能得到最小数的下标，再通过一次交换将最小的数放在最前面，通过n-1次循环之后完成排序。 Ps：相对于冒泡排序来说，比较的次数并没有改变，但是数据交换的次数大大减少。 2、算法步骤 在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。 从剩余未排序元素中继续寻找最小（大）元素，存放到已排序序列的末尾。 重复第二步，直到所有元素均排序完毕。 3、动图演示 4、算法特性 时间复杂度：$O(n^2)$ 空间复杂度：$O(1)$ 特点： 无论什么数据进去都是$O(n^2)$的时间复杂度； 数据规模越小越好。 5、代码实现1234567891011121314151617181920212223242526public void selectSort(int[] array) { // 如果数组为空或者数组中只存在一个元素，则直接返回 if (array == null || array.length &lt; 1) return; int len = array.length; // i 控制循环次数，长度为 len 的数组只需要循环 len-1 次，i的起始值为 0 所以 i &lt; len-1 for (int i = 0; i &lt; len - 1; i++) { // minIndex 用来保存每次比较后较小数的下标。 int minIndex = i; // j 控制比较次数，因为每次循环结束之后最小的数都已经放在了最前面， // 所以下一次循环的时候就可以跳过这个数，所以j的初始值为 i+1 而不需要每次循环都从 0 开始，并且 j&lt;len 即可 for (int j = i + 1; j &lt; len; j++) { //每比较一次都需要将较小数的下标记录下来 if (array[minIndex] &gt; array[j]) { minIndex = j; } } // 当完成一次循环时，就需要将本次循环选取的最小数移动到本次循环开始的位置。 if (minIndex != i) { int temp = array[i]; array[i] = array[minIndex]; array[minIndex] = temp; } // 打印每次循环结束之后数组的排序状态（方便理解） System.out.println(&quot;第&quot; + (i + 1) + &quot;次循环之后的数组：&quot; + Arrays.toString(array)); } }","link":"/2017/04/03/selection-sort/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"排序","slug":"排序","link":"/tags/%E6%8E%92%E5%BA%8F/"},{"name":"选择排序","slug":"选择排序","link":"/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"}],"categories":[{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"}]}